(function($){
    var sendingVote = false;
    var deletingBlueprint = false;
    var managingBlueprintComments = false;
    var checkUserLoginExistsLock = checkUserEmailExistsLock = false;
    var timeoutUserLoginExists = timeoutUserEmailExists = undefined;
    function ucfirst(str) {
        str += '';
        var f = str.charAt(0).toUpperCase();
        return f + str.substr(1);
    }
    function setBootstrapFeedback(elemId, type, helpMessage) {
        var classes = {
            error:'form-group has-error has-feedback',
            success:'form-group has-success has-feedback'
        };
        var glyphicon = {
            error:     '<span class="glyphicon glyphicon-remove form-control-feedback" aria-hidden="true">'
                     + '</span><span id="input'+ucfirst(elemId.substr(1))+'Error" class="sr-only">(error)</span>',
            success:   '<span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true">'
                     + '</span><span id="input'+ucfirst(elemId.substr(1))+'Success" class="sr-only">(success)</span>'
        };
        $(elemId).parents('.form-group').attr('class',classes[type]);
        $(elemId).attr('aria-describedby','input' + ucfirst(elemId.substr(1)) + ucfirst(type));
        $(elemId).parents('.form-group').find('.glyphicon-slot').empty().append(glyphicon[type]);
        if(helpMessage === null) {
            $('#help-'+elemId.substr(1)).addClass('hidden').text();
        }
        else {
            $('#help-'+elemId.substr(1)).removeClass('hidden').text(helpMessage);
        }
    }
    function removeBootstrapFeedback(elemId) {
        $(elemId).parents('.form-group').attr('class','form-group');
        $(elemId).removeAttr('aria-describedby');
        $(elemId).parents('.form-group').find('.glyphicon-slot').empty();
        $('#help-'+elemId.substr(1)).addClass('hidden').text();
    }
    function setGlyphiconLoader(elemId) {
        $(elemId).parents('.form-group').attr('class', 'form-group has-feedback');
        $(elemId).removeAttr('aria-describedby');
        $(elemId).parents('.form-group').find('.glyphicon-slot').empty().append('<span class="glyphicon glyphicon-refresh glyphicon-refresh-animate form-control-feedback"></span>');
    }
    function checkUserLoginExists() {
        checkUserLoginExistsLock = true;
        var nicknameVal = $('#nickname').val();
        if(nicknameVal.length === 0) {
            setBootstrapFeedback('#nickname', 'error', 'Nickname empty');
            checkUserLoginExistsLock = false;
            return;
        }
        setGlyphiconLoader('#nickname');
        $('#facebook-connect-a').parent().removeClass('facebook-connect sign-up');
        $('#twitter-connect-a').parent().removeClass('twitter-connect sign-up');
        $('#google-connect-a').parent().removeClass('google-connect sign-up');
        $.ajax({
            type: 'POST',
            url: wp_ajax_url,
            accepts: "application/json",
            data: {
                action: 'is_nickname_exists',
                nickname: nicknameVal
            },
            success: function(data) {
                if(data.success === true) {
                    setBootstrapFeedback('#nickname', 'error', 'Nickname already used');
                    checkUserLoginExistsLock = false;
                }
                else {
                    setBootstrapFeedback('#nickname', 'success', null);
                    $('#facebook-connect-a').parent().addClass('facebook-connect sign-up');
                    $('#twitter-connect-a').parent().addClass('twitter-connect sign-up');
                    $('#google-connect-a').parent().addClass('google-connect sign-up');
                    $.ajax({
                        type: 'POST',
                        url: wp_ajax_url,
                        accepts: "application/json",
                        data: {
                            action: 'save_nickname_for_sso',
                            nickname: nicknameVal
                        },
                        success: function(data) {
                            if(data.success === false) {
                                setBootstrapFeedback('#nickname', 'error', "Nickname can't be saved for SSO");
                            }
                            checkUserLoginExistsLock = false;
                        },
                        error: function() {
                            checkUserLoginExistsLock = false;
                        }
                    })
                }
            },
            error: function() {
                checkUserLoginExistsLock = false;
            }
        });
    }
    if($('#edit-profile').length > 0) {
      $('#first_password, #second_password').on('keyup', function(){
        var p1 = $('#first_password').val();
        var p2 = $('#second_password').val();
        if(p1.length === 0 && p2.length === 0) {
          removeBootstrapFeedback('#first_password');
          removeBootstrapFeedback('#second_password');
          return;
        }
        if(p1.length < 7 && p2.length < 7) {
          setBootstrapFeedback('#first_password', 'error', null);
          setBootstrapFeedback('#second_password', 'error', 'Password must be 8 characteres length');
          return;
        }
        if(p1 === p2) {
          setBootstrapFeedback('#first_password', 'success', null);
          setBootstrapFeedback('#second_password', 'success', null);
        }
        else {
          setBootstrapFeedback('#first_password', 'error', null);
          setBootstrapFeedback('#second_password', 'error', 'Password and Password Confirm are not the same');
        }
      });
      $('#update-password').click(function(event) {
        var p1 = $('#first_password').val();
        var p2 = $('#second_password').val();
        if(p1.length > 0 || p2.length > 0) {
          if(p1.length < 7 && p2.length < 7) {
            event.preventDefault();
            setBootstrapFeedback('#first_password', 'error', null);
            setBootstrapFeedback('#second_password', 'error', 'Password must be 8 characteres length');
            return;
          }
          if(p1 !== p2) {
            event.preventDefault();
            setBootstrapFeedback('#first_password', 'error', null);
            setBootstrapFeedback('#second_password', 'error', 'Password and Password Confirm are not the same');
            return;
          }
        }
      });
    }
    if($('#page-sign-up').length > 0) {
        $('#nickname').on('keydown', function(event) {
            if(checkUserLoginExistsLock == true) {
                event.preventDefault();
            }
        });
        $('#nickname').on('keyup', function() {
            if(checkUserLoginExistsLock == false) {
                var nickname = $(this).val();
                if(nickname.length === 0) {
                    setBootstrapFeedback('#nickname', 'error', 'Nickname empty');
                    return;
                }
                if(nickname.length > 50) {
                    setBootstrapFeedback('#nickname', 'error', 'Nickname too long');
                    return;
                }
                removeBootstrapFeedback('#nickname');
                if(timeoutUserLoginExists !== undefined) {
                    clearTimeout(timeoutUserLoginExists);
                }
                timeoutUserLoginExists = setTimeout(checkUserLoginExists, 800);
            }
        });
        $('#password, #confirm-password').on('keyup', function(){
            var p1 = $('#password').val();
            var p2 = $('#confirm-password').val();
            if(p1.length === 0 && p2.length === 0) {
                removeBootstrapFeedback('#password');
                removeBootstrapFeedback('#confirm-password');
                return;
            }
            if(p1.length < 7 && p2.length < 7) {
                setBootstrapFeedback('#password', 'error', null);
                setBootstrapFeedback('#confirm-password', 'error', 'Password must be 8 characteres length');
                return;
            }
            if(p1 === p2) {
                setBootstrapFeedback('#password', 'success', null);
                setBootstrapFeedback('#confirm-password', 'success', null);
            }
            else {
                setBootstrapFeedback('#password', 'error', null);
                setBootstrapFeedback('#confirm-password', 'error', 'Password and Password Confirm are not the same');
            }
        });
        $('#sign-up-submit').submit(function(event) {
            if(checkUserLoginExistsLock === true) {
                return;
            }
            if(timeoutUserLoginExists !== undefined) {
                return;
            }
            var nickname = $('#nickname').val();
            if($('#nickname').parents('.form-group').hasClass('has-error') === true) {
                event.preventDefault();
                return;
            }
            if(nickname.length === 0) {
                event.preventDefault();
                setBootstrapFeedback('#nickname', 'error', 'Empty nickname');
                return;
            }
            var p1 = $('#password').val();
            var p2 = $('#password_confirm').val();
            if(p1.length > 0 || p2.length > 0) {
                if(p1.length < 7 && p2.length < 7) {
                    event.preventDefault();
                    setBootstrapFeedback('#password', 'error', null);
                    setBootstrapFeedback('#password_confirm', 'error', 'Password must be 8 characteres length');
                    return;
                }
                if(p1 !== p2) {
                    event.preventDefault();
                    setBootstrapFeedback('#password', 'error', null);
                    setBootstrapFeedback('#password_confirm', 'error', 'Password and Password Confirm are not the same');
                    return;
                }
            }
        });
        $('#facebook-connect-a, #twitter-connect-a, #google-connect-a').click(function(e){
            e.preventDefault();
            if($('#nickname').val() === ""){
                setBootstrapFeedback('#nickname', 'error', 'Empty nickname');
            }
        });
    }
    if($('#score_vote').length > 0) {
        $('#score_vote').on('click','a', function(event){
            event.preventDefault();
            if(sendingVote === false) {
                sendingVote = true;
            }
            else {
                return;
            }
            $('#score_loader').removeClass('hidden');
            var elem = $(this);
            var blueprintId = elem.parent().attr('data-blueprint-id');
            var vote = 'up';
            if(elem.hasClass('vote-down')) {
                vote = 'down';
            }
            $.ajax({
                type: 'POST',
                url: wp_ajax_url,
                data: {
                    action: 'send_vote',
                    vote: vote,
                    id: blueprintId
                },
                success: function(data) {
                    if(data.success) {
                        $('#total_rating').text(data.data.score);
                        $('#upvotes').text(data.data.up);
                        $('#downvotes').text(data.data.down);
                        if(elem.hasClass('voted')) {
                            elem.removeClass('voted');
                            return;
                        }
                        if(vote == 'up') {
                            $('#score_vote .vote-up').addClass('voted');
                            $('#score_vote .vote-down').removeClass('voted');
                        }
                        else {
                            $('#score_vote .vote-down').addClass('voted');
                            $('#score_vote .vote-up').removeClass('voted');
                        }
                    }
                    else {
                        alert(data.data);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    //
                },
                complete: function(jqXHR, textStatus) {
                    sendingVote = false;
                    $('#score_loader').addClass('hidden');
                }
            });
        });
    }
    if($('#edit-blueprint').length > 0) {
        $('#video').keyup(function(){
            var input = $(this);
            removeBootstrapFeedback('#video');
            if(input.val().length < 1) {
                input.parent().find('iframe').parent().remove();
                return;
            }
            var videoIframeUrl = getIframeUrl(input.val());
            var videoIframe = $('<div class="embed-responsive embed-responsive-16by9"><iframe src="'+videoIframeUrl+'" class="embed-responsive-item"></iframe></div>');
            input.parent().find('iframe').parent().remove();
            if(videoIframeUrl.length > 0) {
                input.parent().append(videoIframe);
            }
            else {
                setBootstrapFeedback('#video', 'error', 'Wrong url');
            }
        });
        $("#tags_list").tagit({
            availableTags: availableTags,
            removeConfirmation: true,
            autocomplete: {
                delay: 0,
                minLength: 1
            }
        });
        $('#video').trigger('keyup');
        $('#description').trumbowyg({
            btnsDef: {
                image: {
                    dropdown: ['insertImage'],
                    ico: 'insertImage'
                }
            },
            btns: ['formatting',
                '|', 'btnGrp-design',
                '|', 'link',
                '|', 'image',
                '|', 'btnGrp-lists',
                '|', 'horizontalRule']
        });
        $('#new-blueprint').submit(function(e){
            removeBootstrapFeedback('#blueprint-code');
            removeBootstrapFeedback('#reason');
            var hasError = false;
            if($('#blueprint-code').val().trim().length < 1) {
                hasError = true;
                setBootstrapFeedback('#blueprint-code', 'error', 'New Blueprint is empty');
            }
            if($('#reason').val().trim().length < 1) {
                hasError = true;
                setBootstrapFeedback('#reason', 'error', 'Reason is empty');
            }
            if(hasError) {
                event.preventDefault();
                return false;
            }
        });
        $('#blueprint-code').keyup(function(event) {
            if($(this).val().trim().length < 1) {
                setBootstrapFeedback('#blueprint-code', 'error', 'New Blueprint is empty');
            }
            else {
                removeBootstrapFeedback('#blueprint-code');
            }
        });
        $('#reason').keyup(function(event) {
            if($(this).val().trim().length < 1) {
                setBootstrapFeedback('#reason', 'error', 'Reason is empty');
            }
            else {
                removeBootstrapFeedback('#reason');
            }
        });
        $('#title').keyup(function(event) {
            if($(this).val().trim().length < 1) {
                setBootstrapFeedback('#title', 'error', 'Title is empty');
            }
            else {
                removeBootstrapFeedback('#title');
            }
        });
        $('#edit-blueprint').submit(function(e){
            removeBootstrapFeedback('#title');
            var hasError = false;
            if($('#title').val().trim().length < 1) {
                hasError = true;
                setBootstrapFeedback('#title', 'error', 'Title is empty');
            }
            if(hasError) {
                event.preventDefault();
                return false;
            }
        });
    }
    if($('#search-tags').length > 0) {
        $("#search-tags").tagit({
            availableTags: availableTags,
            autocomplete: {
                delay: 0,
                minLength: 1
            },
            beforeTagAdded: function(event, ui) {
                if($.inArray(ui.tagLabel, availableTags)==-1) return false;
            }
        });
    }
    // popin report bug
    function reportBug(decalageInPx) {
        this.decalageInPx = ((decalageInPx >> 0) + 60) || 0;
        this.isOpen = false;
        this.init();
    }
    reportBug.prototype.init = function() {
        var that = this;
        that.lockOpen = false;
        that.lockSending = false;
        that.toReset = false;
        var form = '<div id="feedback-form-div" style="display:none"><form id="feedback-form"><div class="form-group">\
<p><label for="ffb-title" style="color: #FFF;">Title</label><input type="text" id="ffb-title" name="ffb-title" class="form-control" maxlength="50"/></p>\
<p><label for="ffb-cat" style="color: #FFF;">Category</label><select id="ffb-cat" name="ffb-cat" class="form-control"><option value="">Other</option><option value="blueprint-edition">Blueprint Edition</option><option value="blueprint-render">Blueprint Render</option><option value="list-blueprints">List Blueprints</option><option value="profile">Profile</option><option value="profile-edition">Profile Edition</option><option value="search-blueprints">Search Blueprints</option><option value="website">Website</option></select></p>\
<p><label for="ffb-problem" style="color: #FFF;">Your feedback</label><textarea id="ffb-problem" name="ffb-problem" rows="4" class="form-control"></textarea></p>\
<p style="text-align:center;"><input type="submit" name="ffb-send" id="ffb-send" value="Send" class="btn btn-default"></p>\
</form></div></div>';
        var success = '<div id="feedback-response-div" style="display:none;color:#FFF;text-align: center;">Thanks for your feedback :)<br />You can see all feedbacks on this link: <a href="/feedback" target="_blank" title="Feedback\'s List" style="color:#FFF;font-weight:700;text-decoration:underline">Feedback\'s list</a></div>';
        var btn = '<div style="position: fixed; background-color: grey;  width: 100px;\
z-index: 9999; height: 30px; line-height:20px; top: '+that.decalageInPx+'px; right: -100px; transition: 1s;\
padding:5px;" id="feedback-box"><p id="feedback-opener" style="color: #FFF;text-align:center;cursor:pointer;"><span class="glyphicon glyphicon-bullhorn"></span> Feedback</p>'+form+success+'</div>'
        $('body').append(btn);
        that.box = $('#feedback-box');
        that.btnOpener = $('#feedback-opener');
        that.formFeedback = $('#feedback-form');
        that.formDivFeedback = $('#feedback-form-div');
        that.btnOpener.click(function(e){
            e.preventDefault();
            if(!that.lockOpen) {
                that.lockOpen = true;
                (!that.isOpen) ? that.open() : that.close();
                that.isOpen = !that.isOpen;
            }
            return false;
        });
        that.formFeedback.submit(function(e){
            e.preventDefault();
            if(!that.lockSending) {
                $('#ffb-send').addClass('disabled');
                that.lockSending = true;
                that.send();
            }
            return false;
        });
        setTimeout(function(){
            that.showBtnOpener();
        },800);
    };
    reportBug.prototype.showBtnOpener = function() {
        this.box.css({'right':'0px'});
    };
    reportBug.prototype.open = function() {
        var that = this;
        that.box.css({'width':'300px', 'height':'345px'});
        setTimeout(function(){
            that.formDivFeedback.fadeIn();
            that.lockOpen = false;
        },1000);
    };
    reportBug.prototype.close = function() {
        var that = this;
        if(that.toReset) {
            $('#feedback-response-div').hide();
            $('#ffb-problem').val('');
            $('#ffb-cat').val('');
            $('#ffb-title').val('');
            that.toReset = false;
        }
        this.box.css({'width':'100px', 'height':'30px'});
        this.formDivFeedback.hide();
        setTimeout(function(){
            that.lockOpen = false;
        },1000);
    };
    reportBug.prototype.send = function() {
        var that = this;
        var message = $('#ffb-problem').val().trim();
        var cat = $('#ffb-cat').val().trim();
        var title = $('#ffb-title').val().trim();
        if(title.length < 1) {
            alert('Feedback Title is empty!');
            that.lockSending = false;
            $('#ffb-send').removeClass('disabled');
            return;
        }
        if(message.length < 1) {
            alert('Feedback Message is empty!');
            that.lockSending = false;
            $('#ffb-send').removeClass('disabled');
            return;
        }
        $.ajax({
            type: 'POST',
            url: wp_ajax_url,
            accepts: "application/json",
            data: {
                action: 'send_feedback',
                p: window.location.pathname,
                m: message,
                c: cat,
                t: title
            },
            success: function(data) {
                if(data.success === false) {
                    alert(data.data);
                }
                $('#ffb-send').removeClass('disabled');
                that.formDivFeedback.fadeOut(300, function(){
                    $('#feedback-response-div').fadeIn(300, function(){
                        that.box.css({'height':'100px'});
                        that.toReset = true;
                    });
                });
                that.lockSending = false;
            },
            error: function() {
                $('#ffb-send').removeClass('disabled');
                that.lockSending = false;
            }
        });
        return;
    };
    if(window.bue === undefined) {
        window.bue = {};
    }
    window.bue.reportBug = reportBug;
    if($('#score_vote').length > 0 && $('.pull-right.action-buttons').length > 0) {
        new window.bue.reportBug(50);
    }
    else if($('.add-pastebin.container').length > 0) {
        new window.bue.reportBug(22);
    }
    else {
       new window.bue.reportBug(0);
    }

    // comments
    $('#commentform').submit(function(e){
      if($('#comment').val().trim().length < 1){
        e.preventDefault();
        return false;
      }
    });

    $('.edit-comment').click(function(e){
        e.preventDefault();

        var btn = $(this);
        var commentId = btn.attr('data-comment-id');
        var root = btn.parents('.media-body');
        root.find('.reply').addClass('hidden');
        var text = root.find('.comment-content').text();
        root.find('.comment-content').addClass('hidden');
        root.find('.media-heading').after($('<div class="edit-comment-box"><textarea cols="45" rows="8" class="form-control textarea-fix-resize">'+text+'</textarea><br /><a href="#" class="btn btn-primary save-edit-comment" data-comment-id="'+commentId+'">Save</a><a href="#" class="btn btn-default cancel-edit-comment">Cancel</a></div>'));
    });

    $('body').on('click', '.cancel-edit-comment', function(e){
      e.preventDefault();
      
      var btn = $(this);
      var root = btn.parents('.media-body');
      root.find('.reply').removeClass('hidden');
      root.find('.comment-content').removeClass('hidden');
      root.find('.edit-comment-box').remove();
    });

    $('body').on('click', '.save-edit-comment', function(e){
        e.preventDefault();

        var btn = $(this);
        var commentId = btn.attr('data-comment-id');
        var message = btn.parents('.edit-comment-box').find('textarea').val();

        btn.addClass('disabled');
        btn.next().addClass('disabled');

      $.ajax({
               type: 'POST',
               url: wp_ajax_url,
               accepts: "application/json",
               data: {
                 action: 'edit_comment',
                 id: commentId,
                 message: message
               },
               success: function(data) {
                 window.location.href = window.location.pathname;

                 btn.removeClass('disabled');
                 btn.next().removeClass('disabled');
               },
               error: function(){
                 btn.removeClass('disabled');
                 btn.next().removeClass('disabled');
               }
             });
    });
    
    $('.delete-comment').click(function(e){
      e.preventDefault();

      if(confirm("Are you sure to delete your comment?")){
        var btn = $(this);
        var commentId = btn.attr('data-comment-id');
        
        btn.addClass('disabled');
        
        $.ajax({
          type: 'POST',
          url: wp_ajax_url,
          accepts: "application/json",
          data: {
            action: 'delete_comment',
            id: commentId
          },
          success: function(data) {
            window.location.href = window.location.pathname;

            btn.removeClass('disabled');
          },
          error: function(){
            btn.removeClass('disabled');
          }
        });
      }
    });
    if(window.navigator.userAgent.toUpperCase().indexOf("TRIDENT") !== -1 || window.navigator.userAgent.toUpperCase().indexOf("MSIE") !== -1) {
        $('header').prepend('<p style="background-color:white;color:black;font-size:32px;font-weight:700;text-align:center;margin:0;padding:20px">This website will stop supporting Internet Explorer from version 5.5 to 11, consequently you have to use a modern browser. <a href="https://blueprintue.com/ie.html">See browsers</a></p>');
    }
    if ($('#fast-copy-clipboard').length > 0) {
        $('#fast-copy-clipboard').click(function(e){
            $('#fast-copy-clipboard').attr('style', 'cursor:pointer;');
            $("#blueprint-textarea").show();
            document.getElementById("blueprint-textarea").select();
            document.execCommand("copy");
            document.getElementById("blueprint-textarea").setSelectionRange(0,0);
        });
    }
})(jQuery);
var timeoutWindowResize = undefined;
document.addEventListener('DOMContentLoaded', function(event) {
    cookieChoices.showCookieConsentBar('We use cookies to help us understand ease of use and relevance of content so that we can give you the best experience on our website.', 'OK', 'Cookies List', '/terms-of-use');
    if($('#cookieChoiceInfo').length > 0) {
        function resizeFooter() {
            $('#footer-blueprintue').css({"margin-bottom": $('#cookieChoiceInfo').outerHeight() + 'px'});
        }
        $(window).resize(function(){
            if(timeoutWindowResize !== undefined) {
                clearTimeout(timeoutWindowResize);
            }
            timeoutWindowResize = setTimeout(resizeFooter, 250);
        });
        $("#cookieChoiceDismiss, #cookieChoiceDecline").click(function() {
            $('#footer-blueprintue').css({"margin-bottom":'0px'});
        });
        resizeFooter();
    }
});